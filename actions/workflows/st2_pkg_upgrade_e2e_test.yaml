---
version: '1.0'
input:
  - hostname
  - dns_zone
  - instance_type
  - environment
  - key_name
  - keyfile
  - distro
  - windows_distro
  - role
  - release
  - upgrade_from_version
  - upgrade_to_version
  - chatops
  - pkg_env
  - bootstrap_branch
  - bootstrap_script
  - triggering_commit_url
  - debug
vars:
  - result: ""
  - webui_base_url: http://st2cicd.uswest2.stackstorm.net
  - vm_fqdn: <% ctx().hostname %>.<% ctx().dns_zone %>
  - vm_info:
  - vm_id:
  - vm_windows_id:
  - vm_windows_fqdn: <% ctx().hostname %>win.<% ctx().dns_zone %>
  - installed:
      distro:
      versions:
      version_str: not installed
  - bootstrap_script_url: <% coalesce( ctx().bootstrap_script, "https://raw.githubusercontent.com/StackStorm/st2-packages/" + ctx().bootstrap_branch + "/scripts/st2_bootstrap.sh") %>
  - st2_username: st2admin
  - st2_password: Ch@ngeMe
  - destroy_vm_iteration_count: 0
  - destroy_vm_windows_iteration_count: 0
  - destroy_vm_on_failure_iteration_count: 0
  - destroy_vm_on_failure_windows_iteration_count: 0
  - notify_channels:
    - '#thunderdome'
  - notify_failure_channels:
    - '#thunderdome'
    - '#opstown'
  - pkg_list:
    - st2
    - st2chatops
    - st2web
output:
  - versions: <% ctx().installed.versions %>
tasks:
  get_webui_server:
    action: core.noop
    next:
      - when: <% succeeded() %>
        do:
          - notify_start
          - create_vm
  create_vm:
    action: st2cd.create_vm_role
    input:
      hostname: <% ctx().hostname %>
      instance_type: <% ctx().instance_type %>
      environment: <% ctx().environment %>
      key_name: <% ctx().key_name %>
      keyfile: <% ctx().keyfile %>
      dns_zone: <% ctx().dns_zone %>
      distro: pkg_<% ctx().distro %>
      role: <% ctx().role %>
    next:
      - when: <% succeeded() %>
        publish:
          - vm_info: <% result().output.vm_info %>
          - vm_id: <% result().output.vm_info.id %>
        do:
          - get_bootstrap_script
  get_bootstrap_script:
    action: core.remote_sudo
    input:
      hosts: <% ctx().vm_info.private_ip_address %>
      cmd: curl -Ss -k -o /tmp/st2_bootstrap.sh <% ctx().bootstrap_script_url %>
    next:
      - when: <% succeeded() %>
        do:
          - run_bootstrap_script
  run_bootstrap_script:
    action: core.remote_sudo
    input:
      hosts: <% ctx().vm_info.private_ip_address %>
      # We need to pass in --u16-add-insecure-py3-ppa when we're running ST2 v3.4
      # Note that while the flag is only for Ubuntu 16, the installer script on
      # other OSes will ignore it, so it's safe to use for all OSes.
      cmd: >-
        bash /tmp/st2_bootstrap.sh
        --<% ctx().pkg_env %>
        --<% ctx().release %>
        --version=<% coalesce(ctx().upgrade_from_version, '') %>
        --user=<% ctx().st2_username %>
        --password=<% ctx().st2_password %>
        <% switch((coalesce(ctx().upgrade_from_version, '') = '' or regex('^3\.[45][^\d].*').matches(coalesce(ctx().upgrade_from_version, ''))) => '--u16-add-insecure-py3-ppa', default => '') %>
      timeout: 900
    next:
      - when: <% succeeded() %>
        do:
          - pre_upgrade_stop
  pre_upgrade_stop:
    action: core.remote_sudo
    input:
      hosts: <% ctx().vm_info.private_ip_address %>
      cmd: st2ctl stop
      timeout: 180
    next:
      - do:
          - get_installed_version
  get_installed_version:
    action: st2cd.st2_get_installed_version
    input:
      host: <% ctx().vm_info.private_ip_address %>
    next:
      # - when: <% succeeded() %>
      #   publish:
      #     - installed:
      #         distro: <% result().distro %>
      #         versions: <% result().versions %>
      #         version_str: <% result().versions.items().select( $[0] + "=" + $[1]).join("\n\t") %>
      - when: <% succeeded() and (ctx().distro.startsWith('RHEL') or ctx().distro.startsWith('CENTOS')) %>
        publish:
          - installed:
              distro: <% result().output.distro %>
              versions: <% result().output.versions %>
              version_str: <% result().output.versions.items().select( $[0] + "=" + $[1]).join("\n\t") %>
        do:
          - upgrade_packages_rpm
      - when: <% succeeded() and ctx().distro.startsWith('UBUNTU') %>
        publish:
          - installed:
              distro: <% result().output.distro %>
              versions: <% result().output.versions %>
              version_str: <% result().output.versions.items().select( $[0] + "=" + $[1]).join("\n\t") %>
        do:
          - upgrade_packages_deb
  upgrade_packages_rpm:
    action: st2ci.st2_pkg_upgrade_rpm
    input:
      host: <% ctx().vm_info.private_ip_address %>
      pkg_list: <% ctx().pkg_list %>
      version: <% ctx().upgrade_to_version %>
      distro: <% ctx().distro %>
    next:
      - when: <% succeeded() %>
        do:
          - post_migration_start
  upgrade_packages_deb:
    action: st2ci.st2_pkg_upgrade_deb
    input:
      host: <% ctx().vm_info.private_ip_address %>
      pkg_list: <% ctx().pkg_list %>
      version: <% ctx().upgrade_to_version %>
      distro: <% ctx().distro %>
    next:
      - when: <% succeeded() %>
        do:
          - post_migration_start
  post_migration_start:
    action: core.remote_sudo
    input:
      hosts: <% ctx().vm_info.private_ip_address %>
      cmd: st2ctl start
      timeout: 180
    next:
      - when: <% succeeded() %>
        do:
          - get_upgraded_version
  get_upgraded_version:
    action: st2cd.st2_get_installed_version
    input:
      host: <% ctx().vm_info.private_ip_address %>
    next:
      - when: <% succeeded() %>
        publish:
          - installed:
              distro: <% result().output.distro %>
              versions: <% result().output.versions %>
              version_str: <% result().output.versions.items().select( $[0] + "=" + $[1]).join("\n\t") %>
        do:
          - create_vm_windows

  create_vm_windows:
    action: st2cd.create_vm_windows
    input:
      hostname: <% ctx().windows_hostname %>
      instance_type: <% ctx().instance_type %>
      environment: <% ctx().environment %>
      dns_zone: <% ctx().dns_zone %>
      distro: <% ctx().windows_distro %>
      role: <% ctx().role %>
    next:
      - when: <% succeeded() %>
        publish:
          - vm_windows_info: <% result().output.vm_info %>
          - vm_windows_id: <% result().output.vm_info.id %>
          - vm_windows_username: <% result().output.vm_username %>
          - vm_windows_password: <% result().output.vm_password %>
        do:
          - run_e2e_tests
  run_e2e_tests:
    action: st2cd.st2_e2e_tests
    input:
      host_ip: <% ctx().vm_info.private_ip_address %>
      host_fqdn: <% ctx().vm_fqdn %>
      st2tests_version: <% ctx().upgrade_to_version %>
      chatops: <% ctx().chatops %>
      st2_username: <% ctx().st2_username %>
      st2_password: <% ctx().st2_password %>
      windows_host_ip: <% ctx().vm_windows_info.get(private_ip_address) %>
      windows_host_fqdn: <% ctx().vm_windows_fqdn %>
      windows_username: <% ctx().vm_windows_username %>
      windows_password: <% ctx().vm_windows_password %>
    next:
      - when: <% succeeded() and (not ctx().debug) %>
        do:
          - destroy_vm
      - when: <% succeeded() and (ctx().debug) %>
        do:
          - notify_success
  notify_start:
    with:
      items: channel in <% ctx().notify_channels %>
    action: slack.chat.postMessage
    input:
      channel: <% item(channel) %>
      text: 'st2ci.st2_pkg_upgrade_e2e_test: STARTED'
      attachments: "[{\"title\": \"[st2ci.st2_pkg_upgrade_e2e_test: STARTED]\", \"title_link\": \"<% ctx().webui_base_url %>/#/history/<% ctx().st2.action_execution_id %>/general\", \"text\": \"COMMIT: <% coalesce(ctx().triggering_commit_url, 'n/a') %>\\nHOSTNAME: <% ctx().vm_fqdn %>\\nDISTRO: <% ctx().distro %>\\nRELEASE: <% ctx().pkg_env %> <% ctx().release %>\\nFROM_VERSION: <% ctx().upgrade_from_version %>\\nTO_VERSION: <% ctx().upgrade_to_version %>\\nBOOTSTRAP: <% ctx().bootstrap_script_url %>\", \"color\": \"#808080\"}]"
  destroy_vm:
    action: st2cd.destroy_vm
    input:
      hostname: <% ctx().hostname %>
      instance_id: <% ctx().vm_id %>
    next:
      - when: <% succeeded() %> 
        do:
          - destroy_vm_windows
      - when: <% failed() and (ctx().destroy_vm_iteration_count >= 2) %>
        do:
          - fail
      - when: <% failed() and (ctx().destroy_vm_iteration_count < 2) %>
        publish:
          - destroy_vm_iteration_count: <% ctx().destroy_vm_iteration_count + 1 %>
        do:
          - sleep_destroy_vm
  sleep_destroy_vm:
    action: core.local
    input:
      cmd: sleep 30
    next:
      - when: <% succeeded() %>
        do:
          - destroy_vm
  destroy_vm_windows:
    action: st2cd.destroy_vm
    input:
      hostname: <% ctx().windows_hostname %>
      instance_id: <% ctx().vm_windows_id %>
    next:
      - when: <% succeeded() %>
        do:
          - notify_success
      - when: <% failed() and (ctx().destroy_vm_windows_iteration_count >= 2) %>
        do:
          - notify_failure
      - when: <% failed() and (ctx().destroy_vm_windows_iteration_count < 2) %>
        publish:
          - destroy_vm_windows_iteration_count: <% ctx().destroy_vm_windows_iteration_count + 1 %>
        do:
          - sleep_destroy_vm_windows
  sleep_destroy_vm_windows:
    action: core.local
    input:
      cmd: sleep 30
    next:
      - when: <% succeeded() %>
        do:
          - destroy_vm_windows
  destroy_vm_on_failure:
    action: st2cd.destroy_vm
    input:
      hostname: <% ctx().hostname %>
      instance_id: <% ctx().vm_id %>
    next:
      - when: <% succeeded() %>
        do:
          - destroy_vm_on_failure_windows
      - when: <% failed() and (ctx().destroy_vm_on_failure_iteration_count >= 2) %>
        do:
          - destroy_vm_on_failure_windows
          - fail
      - when: <% failed() and (ctx().destroy_vm_on_failure_iteration_count < 2) %>
        do:
          - sleep_destroy_vm_on_failure
  sleep_destroy_vm_on_failure:
    action: core.local
    input:
      cmd: sleep 30
    next:
      - when: <% succeeded() %>
        do:
          - destroy_vm_on_failure
  destroy_vm_on_failure_windows:
    action: st2cd.destroy_vm
    input:
      hostname: <% ctx().windows_hostname %>
      instance_id: <% ctx().vm_windows_id %>
    next:
      - when: <% succeeded() or (failed() and (ctx().destroy_vm_on_failure_windows_iteration_count >= 2)) %>
        do:
          - notify_failure
          - fail
      - when: <% failed() and (ctx().destroy_vm_on_failure_windows_iteration_count < 2) %>
        publish:
          - destroy_vm_on_failure_windows_iteration_count: <% ctx().destroy_vm_on_failure_windows_iteration_count + 1 %>
        do:
          - sleep_destroy_vm_on_failure_windows
  sleep_destroy_vm_on_failure_windows:
    action: core.local
    input:
      cmd: sleep 30
    next:
      - when: <% succeeded() %>
        do:
          - destroy_vm_on_failure_windows
  notify_success:
    with:
      items: channel in <% ctx().notify_channels %>
    action: slack.chat.postMessage
    input:
      channel: <% item(channel) %>
      text: 'st2ci.st2_pkg_upgrade_e2e_test: SUCCEEDED'
      attachments: "[{\"title\": \"[st2ci.st2_pkg_upgrade_e2e_test: SUCCEEDED]\", \"title_link\": \"<% ctx().webui_base_url %>/#/history/<% ctx().st2.action_execution_id %>/general\", \"text\": \"COMMIT: <% coalesce(ctx().triggering_commit_url, 'n/a') %>\\nHOSTNAME: <% ctx().vm_fqdn %>\\nDISTRO: <% ctx().distro %>\\nRELEASE: <% ctx().pkg_env %> <% ctx().release %>\\nFROM_VERSION: <% ctx().upgrade_from_version %>\\nTO_VERSION: <% ctx().upgrade_to_version %>\\nVERSION INSTALLED:\\n\\t<% ctx().installed.version_str %>\\nBOOTSTRAP: <% ctx().bootstrap_script_url %>\", \"color\": \"#008000\"}]"
  notify_failure:
    with:
      items: channel in <% ctx().notify_failure_channels %>
    action: slack.chat.postMessage
    input:
      channel: <% item(channel) %>
      text: 'st2ci.st2_pkg_upgrade_e2e_test: FAILED'
      attachments: "[{\"title\": \"[st2ci.st2_pkg_upgrade_e2e_test: FAILED]\", \"title_link\": \"<% ctx().webui_base_url %>/#/history/<% ctx().st2.action_execution_id %>/general\", \"text\": \"COMMIT: <% coalesce(ctx().triggering_commit_url, 'n/a') %>\\nHOSTNAME: <% ctx().vm_fqdn %>\\nDISTRO: <% ctx().distro %>\\nRELEASE: <% ctx().pkg_env %> <% ctx().release %>\\nFROM_VERSION: <% ctx().upgrade_from_version %>\\nTO_VERSION: <% ctx().upgrade_to_version %>\\nVERSION INSTALLED:\\n\\t<% ctx().installed.version_str %>\\nBOOTSTRAP: <% ctx().bootstrap_script_url %>\", \"color\": \"#FF0000\"}]"
    next:
      - do:
          - fail

---
version: '1.0'
description: Run the continuous integration for Mistral.
input:
  - test_host
  - build_host
  - distro
  - mis_repo_base
  - mis_repo_main
  - mis_repo_client
  - mis_repo_action
  - mis_repo_branch
  - mis_repo_dir
  - mis_db_type
  - mis_db_name
  - mis_db_user_name
  - mis_db_user_pass
  - mis_db_root_pass
  - mis_api_port
  - st2_repo
  - st2_repo_branch
  - st2_repo_dir
  - merge_upstream
  - debug
  - notify_channels:
      - '#thunderdome'
  - notify_failure_channels:
      - '#thunderdome'
      - '#stackstorm'
vars:
  - webui_base_url: https://st2cicd.uswest2.stackstorm.net
  - hosts:
      test: null
      build: null
  - shas:
      mistral: null
      mistralclient: null
  - deps: null
output:
  - hosts: <% ctx().hosts %>
  - shas: <% ctx().shas %>
  - deps: <% ctx().deps %>
tasks:
  init_vars:
    action: core.noop
    next:
      - when: <% succeeded() %>
        publish:
          - is_infra_setup: false
        do:
          - notify_start
          - get_hosts
  get_hosts:
    action: st2ci.mistral_get_build_hosts
    input:
      hosts: <% dict(test=>ctx().test_host, build=>ctx().build_host) %>
    next:
      - when: <% succeeded() %>
        publish:
          - hosts: <% result().output.hosts %>
        do:
          - setup
  setup:
    action: st2ci.mistral_setup_infra
    input:
      host: <% ctx().hosts.get(test) %>
      distro: <% ctx().distro %>
      mis_repo_base: <% ctx().mis_repo_base %>
      mis_repo_main: <% ctx().mis_repo_main %>
      mis_repo_client: <% ctx().mis_repo_client %>
      mis_repo_action: <% ctx().mis_repo_action %>
      mis_repo_branch: <% ctx().mis_repo_branch %>
      mis_repo_dir: <% ctx().mis_repo_dir %>
      mis_db_type: <% ctx().mis_db_type %>
      mis_db_name: <% ctx().mis_db_name %>
      mis_db_user_name: <% ctx().mis_db_user_name %>
      mis_db_user_pass: <% ctx().mis_db_user_pass %>
      mis_db_root_pass: <% ctx().mis_db_root_pass %>
      mis_api_port: <% ctx().mis_api_port %>
      st2_repo: <% ctx().st2_repo %>
      st2_repo_branch: <% ctx().st2_repo_branch %>
      st2_repo_dir: <% ctx().st2_repo_dir %>
      debug: <% ctx().debug %>
    next:
      - when: <% succeeded() and (result().output.is_mistral_setup) %>
        publish:
          - is_infra_setup: <% result().output.is_mistral_setup and result().output.is_st2_setup %>
        do:
          - run_tests
      - when: <% succeeded() and not (result().output.is_mistral_setup and result().output.is_st2_setup) and not ctx().debug %>
        do:
          - teardown_on_failure
  run_tests:
    action: core.remote
    input:
      hosts: <% ctx().hosts.get(test) %>
      cwd: <% task(setup).result.output.clones.get(st2) %>
      cmd: make mistral-itests 2>&1 | tee /tmp/mistral-itests-output.txt
      timeout: 3600
    next:
      - when: <% succeeded() %>
        do:
          - record_pip_freeze
  record_pip_freeze:
    action: core.remote
    input:
      hosts: <% ctx().hosts.get(test) %>
      cmd: . <% task(setup).result.output.clones.get(mistral) %>/.venv/bin/activate && pip freeze
    next:
      - when: <% succeeded() %>
        publish:
          - deps: <% result().get(ctx().hosts.get(test)).stdout %>
        do:
          - get_commit_shas
  get_commit_shas:
    action: st2ci.mistral_get_commit_shas
    input:
      host: <% ctx().hosts.get(test) %>
      repos: <% task(setup).result.output.clones %>
    next:
      - when: <% succeeded() and (ctx().merge_upstream and ctx().mis_repo_base = openstack) %>
        publish:
          - shas: <% result().output.shas %>
        do:
          - merge_upstreams
      - when: <% succeeded() and (not ctx().merge_upstream or ctx().mis_repo_base = stackstorm) %>
        publish:
          - shas: <% result().output.shas %>
        do:
          - teardown
  merge_upstreams:
    action: st2ci.mistral_merge_upstreams
    input:
      host: <% ctx().hosts.get(build) %>
      shas: <% ctx().shas %>
    next:
      - when: <% succeeded() %>
        do:
          - teardown
  teardown:
    action: st2ci.mistral_teardown_infra
    input:
      host: <% ctx().hosts.get(test) %>
      clones: <% task(setup).result.output.clones %>
      backup: false
    next:
      - when: <% succeeded() %>
        do:
          - notify_success
      - when: <% failed() %>
        do:
          - notify_failure
  teardown_on_failure:
    action: st2ci.mistral_teardown_infra
    input:
      host: <% ctx().hosts.get(test) %>
      clones: <% task(setup).result.output.clones %>
      backup: <% ctx().is_infra_setup %>
    next:
      - do:
          - notify_failure
  notify_start:
    with:
      items: channel in <% ctx().notify_channels %>
    action: slack.chat.postMessage
    input:
      channel: <% item(channel) %>
      text: 'st2ci.mistral: STARTED'
      attachments: '[{"fallback": "[st2ci.mistral: STARTED]", "title": "[st2ci.mistral: STARTED]", "title_link": "<% ctx().webui_base_url %>/#/history/<% ctx().st2.action_execution_id %>/general", "text": "REPO: <% ctx().mis_repo_base %>\nMERGE UPSTREAM: <% ctx().merge_upstream %>", "color": "#808080"}]'
  notify_success:
    with:
      items: channel in <% ctx().notify_channels %>
    action: slack.chat.postMessage
    input:
      channel: <% item(channel) %>
      text: 'st2ci.mistral: SUCCEEDED'
      attachments: '[{"fallback": "[st2ci.mistral: SUCCEEDED]", "title": "[st2ci.mistral: SUCCEEDED]", "title_link": "<% ctx().webui_base_url %>/#/history/<% ctx().st2.action_execution_id %>/general", "text": "REPO: <% ctx().mis_repo_base %>\nMERGE UPSTREAM: <% ctx().merge_upstream %>", "color": "#008000"}]'
  notify_failure:
    with:
      items: channel in <% ctx().notify_failure_channels %>
    action: slack.chat.postMessage
    input:
      channel: <% item(channel) %>
      text: 'st2ci.mistral: FAILED'
      attachments: '[{"fallback": "[st2ci.mistral: FAILED]", "title": "[st2ci.mistral: FAILED]", "title_link": "<% ctx().webui_base_url %>/#/history/<% ctx().st2.action_execution_id %>/general", "text": "REPO: <% ctx().mis_repo_base %>\nMERGE UPSTREAM: <% ctx().merge_upstream %>\nHOSTNAME: <% ctx().hosts.get(test) %>\nINFRA SETUP: <% ctx().is_infra_setup %>", "color": "#FF0000"}]'
    next:
      - do:
          - fail
